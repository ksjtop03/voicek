######################################################################################################
#########################################        기타        #########################################
######################################################################################################

/* ----------------------------------------------------------------------------------------------------
                                       VI 편집기 유용한 기능           
---------------------------------------------------------------------------------------------------- */

1)매크로
:ab aa aaaa  --> aa를 입력하면 aaaa로 자동변환

2)파일 불러오기
:r 파일명

3)vi 화면 분할해서 파일 열기
:sp 파일명

컨트롤 + w 누른 후 방향키(위,아래)누르면 편집기 이동가능


/* ----------------------------------------------------------------------------------------------------
                                       VI 편집기 유용한 기능           
---------------------------------------------------------------------------------------------------- */

1. vi 파일내용 전체카피 후 다른파일로 복사방법
 1) vi로 파일 오픈
 2) :%y
 3) 명령모드에서 ESC 누른 후 
 4) :sp 파일경로   --> vi 에디터가 두개로 나누어 열림
 5) p
 6) wq!



/* ----------------------------------------------------------------------------------------------------
                                       파라미터 값 치환           
---------------------------------------------------------------------------------------------------- */

echo $PGDATA
sed -i "s/shared_preload_libraries = '\$libdir/shared_preload_libraries = '\$libdir\/pg_buffercache,\$libdir/g" $PGDATA/postgresql.conf

sed -i "s/old/new/g" 파일명
ex) sed -i "s/work_mem = 10MB/work_mem = 12MB/g" postgresql.conf



/* ----------------------------------------------------------------------------------------------------
                                    디렉토리사이즈 순으로 조회         
---------------------------------------------------------------------------------------------------- */
 
du -h --max-depth=1 | sort -hr

ex) 
[enterprisedb@TI-PLATFORM-PPAS01 /data]$ du -h --max-depth=1 | sort -hr
du: cannot read directory `./ospo: 허가 거부
27G     .
23G     ./replication_test
2.8G    ./DBA
929M    ./iotdb_tblspc
8.0K    ./aaa
4.0K    ./ospo
0       ./TG


/* ----------------------------------------------------------------------------------------------------
                                     파일사이즈 순으로 조회           
---------------------------------------------------------------------------------------------------- */
 
ll -Sh 디렉토리명

ex) ll -Sh /data
[enterprisedb@TI-PLATFORM-PPAS01 /data]$ ll -Sh /data
합계 796M
-rwxr--r--  1 enterprisedb enterprisedb 274M  3월 19 15:19 TB_CPN_DATA.sql
-rwxr--r--  1 enterprisedb enterprisedb 253M  3월 19 18:30 COUPN_WDSTR_BAS_DATA.sql
-rwxr--r--  1 enterprisedb enterprisedb 151M  3월 18 18:13 COUPN_PBLS_TXN_DATA.sql
-rwxr--r--  1 enterprisedb enterprisedb 112M  3월 18 18:09 COUPN_WDSTR_TXN_DATA.sql
-rwxr--r--  1 enterprisedb enterprisedb 3.2M  3월 19 15:20 COUPN_RSRV_USE_TXN_DATA.sql
-rw-rw-r--  1 enterprisedb enterprisedb 2.3M  3월 20 11:17 pcpdb.log
-rwxr--r--  1 enterprisedb enterprisedb 2.1M  3월 20 11:16 pcpdb.sql
-rwxr--r--  1 enterprisedb enterprisedb  98K  3월 19 15:19 ICIS_COUPN_USE_TXN_DATA.sql
-rw-rw-r--  1 enterprisedb enterprisedb  11K  3월 20 10:59 COUPN_WDSTR_BAS.log
-rwxr--r--  1 enterprisedb enterprisedb  11K  3월 20 10:59 COUPN_WDSTR_BAS.sql
-rw-rw-r--  1 enterprisedb enterprisedb  11K  3월 19 16:27 TB_CPN.log
-rw-rw-r--  1 enterprisedb enterprisedb  11K  3월 18 18:15 COUPN_PBLS_TXN.log
-rw-rw-r--  1 enterprisedb enterprisedb  11K  3월 18 18:14 COUPN_WDSTR_TXN.log


/* ----------------------------------------------------------------------------------------------------
                                     1초 주기로 명령어 반복 수행           
---------------------------------------------------------------------------------------------------- */

while true; do date; netstat -ntlp | grep 13306; sleep 1; done



/* ----------------------------------------------------------------------------------------------------
                                    시스템이 다운된 후에 파일 되살리기           
---------------------------------------------------------------------------------------------------- */

vi -r  --> 되살릴 수 있는 모든 파일 이름 보여주기
vi -r 파일명


/* ----------------------------------------------------------------------------------------------------
                                           vi 에디트 명령어        
---------------------------------------------------------------------------------------------------- */

-- 두 줄을 바꿈
ddp

-- 두 문자를 바꿈
xp



/* ----------------------------------------------------------------------------------------------------
                                           특정 조건으로 파일 찾기
---------------------------------------------------------------------------------------------------- */


-- 디렉토리에서 20메가 넘는 파일 찾기
find 디렉토리 -size +20000 -print

-- 가장 크기가 큰 파일 찾기
ls -lR | sort +4n

-- 가장 크기가 큰 디렉토리 찾기
du -S | sort -n



/* ----------------------------------------------------------------------------------------------------
                                          분할 압축/풀기
---------------------------------------------------------------------------------------------------- */

-- 분할압축
tar cvf - 원본파일 | split -b 1024m - 압축명

-- 압축풀기
cat 압축명* | tar xvf -



/* ----------------------------------------------------------------------------------------------------
                                    원하는 조건으로 파일 내용 결과 추출
---------------------------------------------------------------------------------------------------- */

-- pg_log파일에서 2초이상수행된 쿼리만 확인하는 명령어
cat $PGDATA/pg_log/*-2018-08-10.log | grep -n duration|awk '$8 > 2000 {print}'


-- pg_log파일에서 시간대로 확인
cat enterprisedb-2018-08-21_000000.log | grep duration | awk '$2 < "19:50:00" && $2 > "19:40:00"'


-- pg_log파일에서 해당시간대에 2초이상 쿼리 확인
cat enterprisedb-2018-08-21_000000.log | grep duration | awk '$2 < "19:50:00" && $2 > "19:40:00"' |awk '$8 > 2000 {print}'


-- pg_log파일에서 해당시간대에 2초이상 수행된 update 쿼리 확인
cat enterprisedb-2018-08-21_000000.log | grep duration | grep update | awk '$2 < "19:50:00" && $2 > "19:40:00"' |awk '$8 > 2000 {print}'          


-- 원하는 컬럼 순서대로 출력...
cat 로그파일명 | grep -n duration | awk '$8 > 2000 {print $8,$9,$1,$2,$3,$4,$5,$6,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26}' | sort -r | uniq -c | head -n 10


/* ----------------------------------------------------------------------------------------------------
                                            DB 로그 확인
---------------------------------------------------------------------------------------------------- */

find /data/MARS/pg_log -name "enterprisedb*.log" -atime -1 | sort | tail -n 1| xargs tail -f
find /data/MARS/pg_log -name "enterprisedb*.log" -atime -1 | sort | tail -n 1| xargs tail -500f | egrep -i 'fatal|error|warn|panic'


/* ----------------------------------------------------------------------------------------------------
                                       주석, 공백라인 제외 출력
---------------------------------------------------------------------------------------------------- */

cat 파일명 | grep -Ev '^[[:space:]]*(#|$)'



/* ----------------------------------------------------------------------------------------------------
                                       쉘 스크립트 실행하는 방법
---------------------------------------------------------------------------------------------------- */

-- 환경 : AIX, UNIX, LINUX 등등

-- 명령어 : sh ${스크립트명} 을 입력하여 수행. 또는 파일 권한에 r_x 권한이 있으면 됨.

ex) root에 등록된 크론탭에 root로 스크립트를 수행하도록 설정해두어도 sh를 붙이지 않거나 파일권한에 r_x가 없으면 수행이 되지 않는다.


/* ----------------------------------------------------------------------------------------------------
                                    여러 개 파일의 내용들을 치환해야할 때
---------------------------------------------------------------------------------------------------- */

find /data/DBA/JOB/2019/20191218_CRM19112907500 -name "schema*.sql" -exec  perl -pi -e 's/iotown/hmcmig05/g' {} \;


/* ----------------------------------------------------------------------------------------------------
                                    공백 (^M) 없애기
---------------------------------------------------------------------------------------------------- */

:%s/컨트롤+v+m//g


/* ----------------------------------------------------------------------------------------------------
                                    쉘 스크립트
---------------------------------------------------------------------------------------------------- */

awk -F% '{ print $1 }'







